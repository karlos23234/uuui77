import os
import re
import json
import logging
from flask import Flask, request
import telebot
from telebot import types

# ‘ø’°÷Ä’£’°’æ’∏÷Ä’•’¨ ’¨’∏’£’°’æ’∏÷Ä’∏÷Ç’¥’®
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# ‘ø’∏’∂÷Ü’´’£’∏÷Ç÷Ä’°÷Å’´’°
BOT_TOKEN = os.environ.get("BOT_TOKEN", "YOUR_BOT_TOKEN_HERE")
WEBHOOK_URL = os.environ.get("WEBHOOK_URL", "https://your-app-name.onrender.com")

# ‘≤’∏’ø’´ ’´’∂’´÷Å’´’°’¨’´’¶’°÷Å’´’°
bot = telebot.TeleBot(BOT_TOKEN)

# ’ï’£’∂’°’Ø’°’∂ ÷Ü’∏÷Ç’∂’Ø÷Å’´’°’∂’•÷Ä
def save_json(filename, data):
    """’ä’°’∞’∫’°’∂’•’¨ ’ø’æ’µ’°’¨’∂’•÷Ä’® JSON ÷Ü’°’µ’¨’∏÷Ç’¥"""
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
        return True
    except Exception as e:
        logger.error(f"’ç’≠’°’¨ ÷Ü’°’µ’¨’´ ’∫’°’∞’∫’°’∂’¥’°’∂ ’™’°’¥’°’∂’°’Ø: {e}")
        return False

def load_json(filename):
    """‘≤’•’º’∂’•’¨ ’ø’æ’µ’°’¨’∂’•÷Ä’® JSON ÷Ü’°’µ’¨’´÷Å"""
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}
    except Exception as e:
        logger.error(f"’ç’≠’°’¨ ÷Ü’°’µ’¨’´ ’¢’•’º’∂’¥’°’∂ ’™’°’¥’°’∂’°’Ø: {e}")
        return {}

# Dash ’∞’°’Ω÷Å’•’´ ’æ’°’æ’•÷Ä’°÷Å’∏÷Ç’¥
def is_valid_dash_address(address):
    """’ç’ø’∏÷Ç’£’•’¨ ’°÷Ä’§’µ’∏÷Ñ Dash ’∞’°’Ω÷Å’•’∂ ’æ’°’æ’•÷Ä ’ß"""
    pattern = r'^X[1-9A-HJ-NP-Za-km-z]{33}$'
    return re.match(pattern, address) is not None

# ‘≤’•’º’∂’•’¨ ’ø’æ’µ’°’¨’∂’•÷Ä’®
users = load_json("users.json")
sent_txs = load_json("sent_txs.json")

# ’é’•’¢’∞’∏÷Ç’Ø’´ ’•÷Ä’©’∏÷Ç’≤’´
@app.route('/', methods=['GET'])
def index():
    return "‘≤’∏’ø’® ’°’∑’≠’°’ø’∏÷Ç’¥ ’ß! ‘≤’∏’ø’´ ’∞’•’ø ’∑÷É’æ’•’¨’∏÷Ç ’∞’°’¥’°÷Ä ÷Ö’£’ø’°’£’∏÷Ä’Æ’•÷Ñ Telegram:", 200

@app.route(f"/webhook/{BOT_TOKEN}", methods=["POST"])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return "OK", 200
    else:
        return "’ç’≠’°’¨ ’∞’°÷Ä÷Å’∏÷Ç’¥", 400

# ‘≤’∏’ø’´ ’∞÷Ä’°’¥’°’∂’∂’•÷Ä
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    """‘≤’∏’ø’´ ’Ω’Ø’¶’¢’∂’°’Ø’°’∂ ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂"""
    logger.info(f"’ç’ø’°÷Å’æ’•’¨ ’ß /start ’∞÷Ä’°’¥’°’∂ {message.chat.id}-’´÷Å")
    
    welcome_text = """
üá¶üá≤ ‘≤’°÷Ä’´ ’£’°’¨’∏÷Ç’Ω’ø Dash ’ø÷Ä’°’∂’¶’°’Ø÷Å’´’°’∂’•÷Ä’´ ’¢’∏’ø üá¶üá≤

‘±’µ’Ω ’¢’∏’ø’® ’©’∏÷Ç’µ’¨ ’Ø’ø’° ’∞’•’ø÷á’•’¨ ’±’•÷Ä Dash ’∞’°’Ω÷Å’•’∂’•÷Ä’´’∂ ÷á ’Ω’ø’°’∂’°’¨ ’Æ’°’∂’∏÷Ç÷Å’∏÷Ç’¥’∂’•÷Ä ’¢’∏’¨’∏÷Ä ’∂’∏÷Ä ’ø÷Ä’°’∂’¶’°’Ø÷Å’´’°’∂’•÷Ä’´ ’¥’°’Ω’´’∂:

üìã ’Ä’°’Ω’°’∂’•’¨’´ ’∞÷Ä’°’¥’°’∂’∂’•÷Ä:
/add - ‘±’æ’•’¨’°÷Å’∂’•’¨ ’∂’∏÷Ä Dash ’∞’°’Ω÷Å’•
/list - ‘¥’´’ø’•’¨ ’´’¥ ’∞’°’Ω÷Å’•’∂’•÷Ä’®
/remove - ’Ä’•’º’°÷Å’∂’•’¨ ’∞’°’Ω÷Å’•
/help - ’ë’∏÷Ç÷Å’°’§÷Ä’•’¨ ÷Ö’£’∂’∏÷Ç’©’µ’°’∂ ’ø’•’≤’•’Ø’∏÷Ç’©’µ’∏÷Ç’∂

’à÷Ç’≤’°÷Ä’Ø’•÷Ñ ’±’•÷Ä Dash ’∞’°’Ω÷Å’•’∂ (’Ω’Ø’Ω’æ’∏÷Ç’¥ ’ß X-’∏’æ) ’Ø’°’¥ ÷Ö’£’ø’°’£’∏÷Ä’Æ’•÷Ñ /add ’∞÷Ä’°’¥’°’∂’®:
    """
    try:
        bot.reply_to(message, welcome_text)
        logger.info(f"’Ä’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂ ’∏÷Ç’≤’°÷Ä’Ø’æ’•÷Å {message.chat.id}-’´’∂")
    except Exception as e:
        logger.error(f"’ç’≠’°’¨ ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂ ’∏÷Ç’≤’°÷Ä’Ø’•’¨’´’Ω: {e}")

@bot.message_handler(commands=['add'])
def add_address(message):
    """‘±’æ’•’¨’°÷Å’∂’•’¨ ’∂’∏÷Ä ’∞’°’Ω÷Å’•"""
    try:
        bot.reply_to(message, "üì• ‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’∏÷Ç’≤’°÷Ä’Ø’•’¨ ’±’•÷Ä Dash ’∞’°’Ω÷Å’•’∂ (’Ω’Ø’Ω’æ’∏÷Ç’¥ ’ß X-’∏’æ):")
    except Exception as e:
        logger.error(f"’ç’≠’°’¨ /add ’∞÷Ä’°’¥’°’∂’´ ’¥’∑’°’Ø’¥’°’∂ ’™’°’¥’°’∂’°’Ø: {e}")

@bot.message_handler(commands=['list'])
def list_addresses(message):
    """’ë’∏÷Ç÷Å’°’§÷Ä’•’¨ ’¢’∏’¨’∏÷Ä ’∫’°’∞’∫’°’∂’æ’°’Æ ’∞’°’Ω÷Å’•’∂’•÷Ä’®"""
    try:
        user_id = str(message.chat.id)
        if user_id in users and users[user_id]:
            addresses = "\n".join([f"‚Ä¢ `{addr}`" for addr in users[user_id]])
            bot.reply_to(message, f"üìã ’Å’•÷Ä ’∫’°’∞’∫’°’∂’æ’°’Æ ’∞’°’Ω÷Å’•’∂’•÷Ä’®:\n{addresses}", parse_mode="Markdown")
        else:
            bot.reply_to(message, "‚ùå ‘¥’∏÷Ç÷Ñ ’§’•’º ’π’∏÷Ç’∂’•÷Ñ ’∫’°’∞’∫’°’∂’æ’°’Æ ’∞’°’Ω÷Å’•’∂’•÷Ä:\n’ï’£’ø’°’£’∏÷Ä’Æ’•÷Ñ /add ’∞÷Ä’°’¥’°’∂’® ’∞’°’Ω÷Å’• ’°’æ’•’¨’°÷Å’∂’•’¨’∏÷Ç ’∞’°’¥’°÷Ä:")
    except Exception as e:
        logger.error(f"’ç’≠’°’¨ /list ’∞÷Ä’°’¥’°’∂’´ ’¥’∑’°’Ø’¥’°’∂ ’™’°’¥’°’∂’°’Ø: {e}")

@bot.message_handler(commands=['remove'])
def remove_address(message):
    """’Ä’•’º’°÷Å’∂’•’¨ ’∞’°’Ω÷Å’•"""
    try:
        user_id = str(message.chat.id)
        if user_id in users and users[user_id]:
            # ’ç’ø’•’≤’Æ’•’¨ ’∞’°’Ω÷Å’•’∂’•÷Ä’´ ’Ω’ø’•’≤’∂’°’∑’°÷Ä
            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            for addr in users[user_id]:
                markup.add(addr)
            bot.reply_to(message, "üîΩ ‘∏’∂’ø÷Ä’•÷Ñ ’∞’°’Ω÷Å’•’∂ ’∞’•’º’°÷Å’∂’•’¨’∏÷Ç ’∞’°’¥’°÷Ä:", reply_markup=markup)
            bot.register_next_step_handler(message, process_remove_address)
        else:
            bot.reply_to(message, "‚ùå ‘¥’∏÷Ç÷Ñ ’§’•’º ’π’∏÷Ç’∂’•÷Ñ ’∫’°’∞’∫’°’∂’æ’°’Æ ’∞’°’Ω÷Å’•’∂’•÷Ä:\n’ï’£’ø’°’£’∏÷Ä’Æ’•÷Ñ /add ’∞÷Ä’°’¥’°’∂’® ’∞’°’Ω÷Å’• ’°’æ’•’¨’°÷Å’∂’•’¨’∏÷Ç ’∞’°’¥’°÷Ä:")
    except Exception as e:
        logger.error(f"’ç’≠’°’¨ /remove ’∞÷Ä’°’¥’°’∂’´ ’¥’∑’°’Ø’¥’°’∂ ’™’°’¥’°’∂’°’Ø: {e}")

def process_remove_address(message):
    """’Ñ’∑’°’Ø’•’¨ ’∞’°’Ω÷Å’•’´ ’∞’•’º’°÷Å’∏÷Ç’¥’®"""
    try:
        user_id = str(message.chat.id)
        address = message.text.strip()
        
        if user_id in users and address in users[user_id]:
            users[user_id].remove(address)
            save_json("users.json", users)
            
            # ’Ä’•’º’°÷Å’∂’•’¨ ’∂’°÷á ’ø÷Ä’°’∂’¶’°’Ø÷Å’´’°’∂’•÷Ä’´ ’∫’°’ø’¥’∏÷Ç’©’µ’∏÷Ç’∂’®
            if user_id in sent_txs and address in sent_txs[user_id]:
                del sent_txs[user_id][address]
                save_json("sent_txs.json", sent_txs)
            
            # ’Ä’•’º’°÷Å’∂’•’¨ ’Ω’ø’•’≤’∂’°’∑’°÷Ä’®
            markup = types.ReplyKeyboardRemove()
            bot.reply_to(message, f"‚úÖ ’Ä’°’Ω÷Å’•’∂ `{address}` ’∞’°’ª’∏’≤’∏÷Ç’©’µ’°’¥’¢ ’∞’•’º’°÷Å’æ’•÷Å:", reply_markup=markup, parse_mode="Markdown")
        else:
            bot.reply_to(message, "‚ùå ‘±’µ’Ω ’∞’°’Ω÷Å’•’∂ ’π’´ ’£’ø’∂’æ’•’¨ ’±’•÷Ä ’∫’°’∞’∫’°’∂’æ’°’Æ ’∞’°’Ω÷Å’•’∂’•÷Ä’´ ÷Å’°’∂’Ø’∏÷Ç’¥:")
    except Exception as e:
        logger.error(f"’ç’≠’°’¨ ’∞’°’Ω÷Å’•’´ ’∞’•’º’°÷Å’¥’°’∂ ’™’°’¥’°’∂’°’Ø: {e}")

@bot.message_handler(func=lambda message: message.text and message.text.startswith('X'))
def save_address(message):
    """’ä’°’∞’∫’°’∂’•’¨ ’∂’∏÷Ä ’∞’°’Ω÷Å’•"""
    try:
        user_id = str(message.chat.id)
        address = message.text.strip()
        
        if not is_valid_dash_address(address):
            bot.reply_to(message, "‚ùå ‘±’∂’æ’°’æ’•÷Ä Dash ’∞’°’Ω÷Å’•: ‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’∂’•÷Ä’¥’∏÷Ç’Æ’•’¨ ’æ’°’æ’•÷Ä ’∞’°’Ω÷Å’•, ’∏÷Ä’® ’Ω’Ø’Ω’æ’∏÷Ç’¥ ’ß X-’∏’æ ÷á ’∏÷Ç’∂’´ 34 ’∂’´’∑:")
            return
        
        if user_id not in users:
            users[user_id] = []
        
        if address in users[user_id]:
            bot.reply_to(message, f"‚ÑπÔ∏è ’Ä’°’Ω÷Å’•’∂ `{address}` ’°÷Ä’§’•’∂ ’£’∏’µ’∏÷Ç’©’µ’∏÷Ç’∂ ’∏÷Ç’∂’´ ’±’•÷Ä ’∫’°’∞’∫’°’∂’æ’°’Æ ’∞’°’Ω÷Å’•’∂’•÷Ä’´ ÷Å’°’∂’Ø’∏÷Ç’¥:", parse_mode="Markdown")
            return
        
        users[user_id].append(address)
        save_json("users.json", users)

        if user_id not in sent_txs:
            sent_txs[user_id] = {}
        sent_txs[user_id][address] = []
        save_json("sent_txs.json", sent_txs)

        bot.reply_to(message, f"‚úÖ ’Ä’°’Ω÷Å’•’∂ `{address}` ’∫’°’∞’∫’°’∂’æ’•÷Å:\n‘±’µ’™’¥ ’•’Ω ’Ø’∏÷Ç’≤’°÷Ä’Ø’•’¥ ’∂’∏÷Ä ’ø÷Ä’°’∂’¶’°’Ø÷Å’´’°’∂’•÷Ä’´ ’Æ’°’∂’∏÷Ç÷Å’∏÷Ç’¥’∂’•÷Ä:", parse_mode="Markdown")
    except Exception as e:
        logger.error(f"’ç’≠’°’¨ ’∞’°’Ω÷Å’•’´ ’∫’°’∞’∫’°’∂’¥’°’∂ ’™’°’¥’°’∂’°’Ø: {e}")

@bot.message_handler(func=lambda message: True)
def handle_other_messages(message):
    """’Ñ’∑’°’Ø’•’¨ ’°’µ’¨ ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä"""
    try:
        if message.text and message.text.startswith('/'):
            bot.reply_to(message, "‚ùå ‘±’∂’∞’°’µ’ø ’∞÷Ä’°’¥’°’∂: ’ï’£’ø’°’£’∏÷Ä’Æ’•÷Ñ /help ’¢’∏’¨’∏÷Ä ’∞’°’Ω’°’∂’•’¨’´ ’∞÷Ä’°’¥’°’∂’∂’•÷Ä’® ’ø’•’Ω’∂’•’¨’∏÷Ç ’∞’°’¥’°÷Ä:")
        else:
            bot.reply_to(message, "‚ùå ‘µ’Ω ’∞’°’Ω’Ø’°’∂’∏÷Ç’¥ ’•’¥ ’¥’´’°’µ’∂ Dash ’∞’°’Ω÷Å’•’∂’•÷Ä’® (’Ω’Ø’Ω’æ’∏÷Ç’¥ ’•’∂ X-’∏’æ) ’Ø’°’¥ ’∞÷Ä’°’¥’°’∂’∂’•÷Ä’®:")
    except Exception as e:
        logger.error(f"’ç’≠’°’¨ ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’°’∂ ’¥’∑’°’Ø’¥’°’∂ ’™’°’¥’°’∂’°’Ø: {e}")

if __name__ == "__main__":
    # ‘≤’•’º’∂’•’¨ ’∫’°’∞’∫’°’∂’æ’°’Æ ’ø’æ’µ’°’¨’∂’•÷Ä’®
    users = load_json("users.json")
    sent_txs = load_json("sent_txs.json")
    
    try:
        # ‘ø’°÷Ä’£’°’æ’∏÷Ä’•’¨ ’æ’•’¢’∞’∏÷Ç’Ø
        bot.remove_webhook()
        bot.set_webhook(url=f"{WEBHOOK_URL}/webhook/{BOT_TOKEN}")
        logger.info(f"’é’•’¢’∞’∏÷Ç’Ø’® ’Ø’°÷Ä’£’°’æ’∏÷Ä’æ’°’Æ ’ß: {WEBHOOK_URL}/webhook/{BOT_TOKEN}")
    except Exception as e:
        logger.error(f"’ç’≠’°’¨ ’æ’•’¢’∞’∏÷Ç’Ø ’Ø’°÷Ä’£’°’æ’∏÷Ä’•’¨’´’Ω: {e}")
    
    # ‘≥’∏÷Ä’Æ’°÷Ä’Ø’•’¨ ’∞’°’æ’•’¨’æ’°’Æ’®
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)

