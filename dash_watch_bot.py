import os
import re
import json
from flask import Flask, request, render_template
import telebot
from datetime import datetime

app = Flask(__name__)

# ‘ø’∏’∂÷Ü’´’£’∏÷Ç÷Ä’°÷Å’´’°
BOT_TOKEN = os.environ.get("8482347131:AAG1F8M_Qvalpu7it4dEHOul1YVVME3iRxQ")
WEBHOOK_URL = os.environ.get("WEBHOOK_URL", "https://uuui77-5zd8.onrender.com")

# ‘≤’∏’ø’´ ’´’∂’´÷Å’´’°’¨’´’¶’°÷Å’´’°
bot = telebot.TeleBot(BOT_TOKEN)

# ’à÷Ç’≤’≤’°’©’´’º’°’µ’´’∂ ’∫’°’∞’∫’°’∂’∏÷Ç’¥ (’°÷Ä’ø’°’§÷Ä’∏÷Ç’©’µ’°’∂ ’∞’°’¥’°÷Ä ÷É’∏’≠’°÷Ä’´’∂’•’¨ ’ø’æ’µ’°’¨’∂’•÷Ä’´ ’¢’°’¶’°’µ’∏’æ)
users = {}
sent_txs = {}

# ’ï’£’∂’°’Ø’°’∂ ÷Ü’∏÷Ç’∂’Ø÷Å’´’°’∂’•÷Ä
def save_json(filename, data):
    """’ä’°’∞’∫’°’∂’•’¨ ’ø’æ’µ’°’¨’∂’•÷Ä’® JSON ÷Ü’°’µ’¨’∏÷Ç’¥"""
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

def load_json(filename):
    """‘≤’•’º’∂’•’¨ ’ø’æ’µ’°’¨’∂’•÷Ä’® JSON ÷Ü’°’µ’¨’´÷Å"""
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

# Dash ’∞’°’Ω÷Å’•’´ ’æ’°’æ’•÷Ä’°÷Å’∏÷Ç’¥
def is_valid_dash_address(address):
    """’ç’ø’∏÷Ç’£’•’¨ ’°÷Ä’§’µ’∏÷Ñ Dash ’∞’°’Ω÷Å’•’∂ ’æ’°’æ’•÷Ä ’ß"""
    pattern = r'^X[1-9A-HJ-NP-Za-km-z]{33}$'
    return re.match(pattern, address) is not None

# ’é’•’¢’∞’∏÷Ç’Ø’´ ’•÷Ä’©’∏÷Ç’≤’´
@app.route(f"/{BOT_TOKEN}", methods=["POST"])
def webhook():
    json_data = request.get_json()
    update = telebot.types.Update.de_json(json_data)
    bot.process_new_updates([update])
    return "OK", 200

# ‘≤’∏’ø’´ ’∞÷Ä’°’¥’°’∂’∂’•÷Ä
@bot.message_handler(commands=["start", "help"])
def send_welcome(msg):
    """‘≤’∏’ø’´ ’Ω’Ø’¶’¢’∂’°’Ø’°’∂ ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂"""
    welcome_text = """
    üá¶üá≤ ‘≤’°÷Ä’´ ’£’°’¨’∏÷Ç’Ω’ø Dash ’ø÷Ä’°’∂’¶’°’Ø÷Å’´’°’∂’•÷Ä’´ ’¢’∏’ø üá¶üá≤

    ‘±’µ’Ω ’¢’∏’ø’® ’©’∏÷Ç’µ’¨ ’Ø’ø’° ’∞’•’ø÷á’•’¨ ’±’•÷Ä Dash ’∞’°’Ω÷Å’•’∂’•÷Ä’´’∂ ÷á ’Ω’ø’°’∂’°’¨ ’Æ’°’∂’∏÷Ç÷Å’∏÷Ç’¥’∂’•÷Ä ’¢’∏’¨’∏÷Ä ’∂’∏÷Ä ’ø÷Ä’°’∂’¶’°’Ø÷Å’´’°’∂’•÷Ä’´ ’¥’°’Ω’´’∂:

    üìã ’Ä’°’Ω’°’∂’•’¨’´ ’∞÷Ä’°’¥’°’∂’∂’•÷Ä:
    /add - ‘±’æ’•’¨’°÷Å’∂’•’¨ ’∂’∏÷Ä Dash ’∞’°’Ω÷Å’•
    /list - ‘¥’´’ø’•’¨ ’´’¥ ’∞’°’Ω÷Å’•’∂’•÷Ä’®
    /remove - ’Ä’•’º’°÷Å’∂’•’¨ ’∞’°’Ω÷Å’•
    /help - ’ë’∏÷Ç÷Å’°’§÷Ä’•’¨ ÷Ö’£’∂’∏÷Ç’©’µ’°’∂ ’ø’•’≤’•’Ø’∏÷Ç’©’µ’∏÷Ç’∂

    ’à÷Ç’≤’°÷Ä’Ø’•÷Ñ ’±’•÷Ä Dash ’∞’°’Ω÷Å’•’∂ (’Ω’Ø’Ω’æ’∏÷Ç’¥ ’ß X-’∏’æ) ’Ø’°’¥ ÷Ö’£’ø’°’£’∏÷Ä’Æ’•÷Ñ /add ’∞÷Ä’°’¥’°’∂’®:
    """
    bot.reply_to(msg, welcome_text)

@bot.message_handler(commands=["add"])
def add_address(msg):
    """‘±’æ’•’¨’°÷Å’∂’•’¨ ’∂’∏÷Ä ’∞’°’Ω÷Å’•"""
    bot.reply_to(msg, "üì• ‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’∏÷Ç’≤’°÷Ä’Ø’•’¨ ’±’•÷Ä Dash ’∞’°’Ω÷Å’•’∂ (’Ω’Ø’Ω’æ’∏÷Ç’¥ ’ß X-’∏’æ):")

@bot.message_handler(commands=["list"])
def list_addresses(msg):
    """’ë’∏÷Ç÷Å’°’§÷Ä’•’¨ ’¢’∏’¨’∏÷Ä ’∫’°’∞’∫’°’∂’æ’°’Æ ’∞’°’Ω÷Å’•’∂’•÷Ä’®"""
    user_id = str(msg.chat.id)
    if user_id in users and users[user_id]:
        addresses = "\n".join([f"‚Ä¢ `{addr}`" for addr in users[user_id]])
        bot.reply_to(msg, f"üìã ’Å’•÷Ä ’∫’°’∞’∫’°’∂’æ’°’Æ ’∞’°’Ω÷Å’•’∂’•÷Ä’®:\n{addresses}", parse_mode="Markdown")
    else:
        bot.reply_to(msg, "‚ùå ‘¥’∏÷Ç÷Ñ ’§’•’º ’π’∏÷Ç’∂’•÷Ñ ’∫’°’∞’∫’°’∂’æ’°’Æ ’∞’°’Ω÷Å’•’∂’•÷Ä:\n’ï’£’ø’°’£’∏÷Ä’Æ’•÷Ñ /add ’∞÷Ä’°’¥’°’∂’® ’∞’°’Ω÷Å’• ’°’æ’•’¨’°÷Å’∂’•’¨’∏÷Ç ’∞’°’¥’°÷Ä:")

@bot.message_handler(commands=["remove"])
def remove_address(msg):
    """’Ä’•’º’°÷Å’∂’•’¨ ’∞’°’Ω÷Å’•"""
    user_id = str(msg.chat.id)
    if user_id in users and users[user_id]:
        # ’ç’ø’•’≤’Æ’•’¨ ’∞’°’Ω÷Å’•’∂’•÷Ä’´ ’Ω’ø’•’≤’∂’°’∑’°÷Ä
        markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        for addr in users[user_id]:
            markup.add(addr)
        bot.reply_to(msg, "üîΩ ‘∏’∂’ø÷Ä’•÷Ñ ’∞’°’Ω÷Å’•’∂ ’∞’•’º’°÷Å’∂’•’¨’∏÷Ç ’∞’°’¥’°÷Ä:", reply_markup=markup)
        bot.register_next_step_handler(msg, process_remove_address)
    else:
        bot.reply_to(msg, "‚ùå ‘¥’∏÷Ç÷Ñ ’§’•’º ’π’∏÷Ç’∂’•÷Ñ ’∫’°’∞’∫’°’∂’æ’°’Æ ’∞’°’Ω÷Å’•’∂’•÷Ä:\n’ï’£’ø’°’£’∏÷Ä’Æ’•÷Ñ /add ’∞÷Ä’°’¥’°’∂’® ’∞’°’Ω÷Å’• ’°’æ’•’¨’°÷Å’∂’•’¨’∏÷Ç ’∞’°’¥’°÷Ä:")

def process_remove_address(msg):
    """’Ñ’∑’°’Ø’•’¨ ’∞’°’Ω÷Å’•’´ ’∞’•’º’°÷Å’∏÷Ç’¥’®"""
    user_id = str(msg.chat.id)
    address = msg.text.strip()
    
    if user_id in users and address in users[user_id]:
        users[user_id].remove(address)
        save_json("users.json", users)
        
        # ’Ä’•’º’°÷Å’∂’•’¨ ’∂’°÷á ’ø÷Ä’°’∂’¶’°’Ø÷Å’´’°’∂’•÷Ä’´ ’∫’°’ø’¥’∏÷Ç’©’µ’∏÷Ç’∂’®
        if user_id in sent_txs and address in sent_txs[user_id]:
            del sent_txs[user_id][address]
            save_json("sent_txs.json", sent_txs)
        
        # ’Ä’•’º’°÷Å’∂’•’¨ ’Ω’ø’•’≤’∂’°’∑’°÷Ä’®
        markup = telebot.types.ReplyKeyboardRemove()
        bot.reply_to(msg, f"‚úÖ ’Ä’°’Ω÷Å’•’∂ `{address}` ’∞’°’ª’∏’≤’∏÷Ç’©’µ’°’¥’¢ ’∞’•’º’°÷Å’æ’•÷Å:", reply_markup=markup, parse_mode="Markdown")
    else:
        bot.reply_to(msg, "‚ùå ‘±’µ’Ω ’∞’°’Ω÷Å’•’∂ ’π’´ ’£’ø’∂’æ’•’¨ ’±’•÷Ä ’∫’°’∞’∫’°’∂’æ’°’Æ ’∞’°’Ω÷Å’•’∂’•÷Ä’´ ÷Å’°’∂’Ø’∏÷Ç’¥:")

@bot.message_handler(func=lambda m: m.text and m.text.startswith("X"))
def save_address(msg):
    """’ä’°’∞’∫’°’∂’•’¨ ’∂’∏÷Ä ’∞’°’Ω÷Å’•"""
    user_id = str(msg.chat.id)
    address = msg.text.strip()
    
    if not is_valid_dash_address(address):
        bot.reply_to(msg, "‚ùå ‘±’∂’æ’°’æ’•÷Ä Dash ’∞’°’Ω÷Å’•: ‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’∂’•÷Ä’¥’∏÷Ç’Æ’•’¨ ’æ’°’æ’•÷Ä ’∞’°’Ω÷Å’•, ’∏÷Ä’® ’Ω’Ø’Ω’æ’∏÷Ç’¥ ’ß X-’∏’æ ÷á ’∏÷Ç’∂’´ 34 ’∂’´’∑:")
        return
    
    if user_id not in users:
        users[user_id] = []
    
    if address in users[user_id]:
        bot.reply_to(msg, f"‚ÑπÔ∏è ’Ä’°’Ω÷Å’•’∂ `{address}` ’°÷Ä’§’•’∂ ’£’∏’µ’∏÷Ç’©’µ’∏÷Ç’∂ ’∏÷Ç’∂’´ ’±’•÷Ä ’∫’°’∞’∫’°’∂’æ’°’Æ ’∞’°’Ω÷Å’•’∂’•÷Ä’´ ÷Å’°’∂’Ø’∏÷Ç’¥:", parse_mode="Markdown")
        return
    
    users[user_id].append(address)
    save_json("users.json", users)

    if user_id not in sent_txs:
        sent_txs[user_id] = {}
    sent_txs[user_id][address] = []
    save_json("sent_txs.json", sent_txs)

    bot.reply_to(msg, f"‚úÖ ’Ä’°’Ω÷Å’•’∂ `{address}` ’∫’°’∞’∫’°’∂’æ’•÷Å:\n‘±’µ’™’¥ ’•’Ω ’Ø’∏÷Ç’≤’°÷Ä’Ø’•’¥ ’∂’∏÷Ä ’ø÷Ä’°’∂’¶’°’Ø÷Å’´’°’∂’•÷Ä’´ ’Æ’°’∂’∏÷Ç÷Å’∏÷Ç’¥’∂’•÷Ä:", parse_mode="Markdown")

@bot.message_handler(func=lambda m: True)
def handle_other_messages(msg):
    """’Ñ’∑’°’Ø’•’¨ ’°’µ’¨ ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä"""
    if msg.text.startswith('/'):
        bot.reply_to(msg, "‚ùå ‘±’∂’∞’°’µ’ø ’∞÷Ä’°’¥’°’∂: ’ï’£’ø’°’£’∏÷Ä’Æ’•÷Ñ /help ’¢’∏’¨’∏÷Ä ’∞’°’Ω’°’∂’•’¨’´ ’∞÷Ä’°’¥’°’∂’∂’•÷Ä’® ’ø’•’Ω’∂’•’¨’∏÷Ç ’∞’°’¥’°÷Ä:")
    else:
        bot.reply_to(msg, "‚ùå ‘µ’Ω ’∞’°’Ω’Ø’°’∂’∏÷Ç’¥ ’•’¥ ’¥’´’°’µ’∂ Dash ’∞’°’Ω÷Å’•’∂’•÷Ä’® (’Ω’Ø’Ω’æ’∏÷Ç’¥ ’•’∂ X-’∏’æ) ’Ø’°’¥ ’∞÷Ä’°’¥’°’∂’∂’•÷Ä’®:")

# ’é’•’¢ ’´’∂’ø’•÷Ä÷Ü’•’µ’Ω’´ ’∞’°’¥’°÷Ä
@app.route("/")
def dashboard():
    """‘ø’°’º’°’æ’°÷Ä’¥’°’∂ ’æ’°’∞’°’∂’°’Ø’´ ’ß’ª"""
    total_users = len(users)
    total_addresses = sum(len(addrs) for addrs in users.values())
    
    return render_template('dashboard.html', 
                         total_users=total_users,
                         total_addresses=total_addresses)

if __name__ == "__main__":
    # ‘≤’•’º’∂’•’¨ ’∫’°’∞’∫’°’∂’æ’°’Æ ’ø’æ’µ’°’¨’∂’•÷Ä’®
    users = load_json("users.json")
    sent_txs = load_json("sent_txs.json")
    
    # ‘ø’°÷Ä’£’°’æ’∏÷Ä’•’¨ ’æ’•’¢’∞’∏÷Ç’Ø
    bot.remove_webhook()
    bot.set_webhook(url=f"{WEBHOOK_URL}/{BOT_TOKEN}")
    print("’é’•’¢’∞’∏÷Ç’Ø’® ’Ø’°÷Ä’£’°’æ’∏÷Ä’æ’°’Æ ’ß:", f"{WEBHOOK_URL}/{BOT_TOKEN}")
    
    # ‘≥’∏÷Ä’Æ’°÷Ä’Ø’•’¨ ’∞’°’æ’•’¨’æ’°’Æ’®
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)

