import os
import requests
import time
from datetime import datetime
import threading
import telebot
from flask import Flask, request

# Environment variables
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

if not BOT_TOKEN or not WEBHOOK_URL:
    raise ValueError("Add BOT_TOKEN and WEBHOOK_URL as environment variables")

bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

# Secret PIN code
PIN_CODE = "1234"

# Payment address (’±’•÷Ä DASH ’∞’°’Ω÷Å’•’∂, ’∏÷Ä’ø’•’≤ ÷Ö’£’ø’°’ø’•÷Ä’•÷Ä’® ’∫’•’ø÷Ñ ’ß ÷É’∏’≠’°’∂÷Å’•’∂)
PAYMENT_ADDRESS = "XyYourPaymentDashAddressHere"

# ’ä’¨’°’∂’∂’•÷Ä ÷á ’§÷Ä’°’∂÷Å ’°÷Ä’™’•÷Ñ’® ’§’∏’¨’°÷Ä’∏’æ
payment_packages = {
    "1_month": 40,
    "6_months": 200,
    "1_year": 380,
}

package_names = {
    "1_month": "1 ’°’¥’Ω’æ’°",
    "6_months": "6 ’°’¥’Ω’æ’°",
    "1_year": "1 ’ø’°÷Ä’æ’°",
}

# ’ä’°’∞’∏÷Å’∂’•÷Ä
authorized_users = set()         # ’Ñ’∏÷Ç’ø÷Ñ ’•’≤’°’Æ ÷á ’æ’≥’°÷Ä’°’Æ ÷Ö’£’ø’°’ø’•÷Ä’•÷Ä’´ IDs
users = {}                      # {user_id: [dash_addresses]}
sent_txs = {}                   # {address: [{"txid": ..., "num": ...}]}
user_payments = {}              # {user_id: True/False}
user_packages = {}              # {user_id: {"package": ..., "paid": ..., "start_time": ..., "paid_txs": set()}}

cached_price = None

# ’ñ’∏÷Ç’∂’Ø÷Å’´’°’ù ’Ω’ø’°’∂’∏÷Ç’¥ ’ß DASH-’´ ’°÷Ä’™’∏÷Ç’µ’©’® ’§’∏’¨’°÷Ä’∏’æ (’Ø’•’∑’°’æ’∏÷Ä’æ’°’Æ)
def get_dash_price_usd():
    global cached_price
    try:
        r = requests.get("https://api.coingecko.com/api/v3/simple/price?ids=dash&vs_currencies=usd", timeout=15)
        price = float(r.json().get("dash", {}).get("usd", 0) or 0)
        if price > 0:
            cached_price = price
            return price
    except:
        pass
    return cached_price

# ’ç’ø’°÷Å’´÷Ä ’æ’•÷Ä’ª’´’∂ ÷É’∏’≠’°’∂÷Å’∏÷Ç’¥’∂’•÷Ä’® ’∞’°’Ω÷Å’•’´ ’∞’°’¥’°÷Ä
def get_latest_txs(address):
    try:
        r = requests.get(f"https://insight.dash.org/insight-api/txs/?address={address}", timeout=15)
        data = r.json()
        return data.get("txs", [])
    except Exception as e:
        print("Error fetching TXs:", e)
        return []

# ’Ä’°’∑’æ’´÷Ä ÷É’∏’≠’°’∂÷Å’¥’°’∂ ’¥’•’ª ’Ω’ø’°÷Å’æ’°’Æ ’£’∏÷Ç’¥’°÷Ä’® ’ø’æ’µ’°’¨ ’∞’°’Ω÷Å’•’´ ’∞’°’¥’°÷Ä
def received_amount_in_tx(tx, address):
    amt = 0.0
    for o in tx.get("vout", []):
        spk = o.get("scriptPubKey", {})
        addrs = spk.get("addresses", [])
        if isinstance(addrs, str):
            addrs = [addrs]
        if address in addrs:
            try:
                amt += float(o.get("value", 0))
            except:
                pass
    return amt

# ’é’≥’°÷Ä’∏÷Ç’¥’∂’•÷Ä’´ ’Ω’ø’∏÷Ç’£’∏÷Ç’¥ ÷Ö’£’ø’°’ø’´÷Ä’∏’ª ’∞’°’¥’°÷Ä
def check_user_payment(user_id, payment_address=PAYMENT_ADDRESS):
    if user_id not in user_packages:
        return False
    package_info = user_packages[user_id]
    if package_info["paid"]:
        return True

    required_amount = payment_packages.get(package_info["package"])
    if not required_amount:
        return False

    txs = get_latest_txs(payment_address)
    total_received = 0.0

    for tx in txs:
        txid = tx.get("txid")
        if txid in package_info["paid_txs"]:
            continue  # TX ’°÷Ä’§’•’∂ ’∞’°’∑’æ’°÷Ä’Ø’æ’°’Æ ’ß
        amt = received_amount_in_tx(tx, payment_address)
        if amt > 0:
            total_received += amt
            package_info["paid_txs"].add(txid)

    price = get_dash_price_usd()
    if not price:
        return False

    total_usd = total_received * price

    if total_usd >= required_amount:
        package_info["paid"] = True
        package_info["start_time"] = time.time()
        user_payments[user_id] = True
        bot.send_message(user_id,
            f"üéâ ‘¥’∏÷Ç÷Ñ ’æ’≥’°÷Ä’•’¨ ’•÷Ñ {package_names[package_info['package']]} ÷É’°’©’•’©’´ ’∞’°’¥’°÷Ä÷â "
            "’Ä’´’¥’° ’Ø’°÷Ä’∏’≤ ’•÷Ñ ’¥’∏÷Ç’ø÷Ñ’°’£÷Ä’•’¨ PIN ’Ø’∏’§’®÷â")
        return True
    return False

# ’ä’°÷Ä’¢’•÷Ä’°’Ø’°’∂ ’Ω’ø’∏÷Ç’£’∏÷Ç’¥ ’æ’≥’°÷Ä’∏÷Ç’¥’∂’•÷Ä’´
def payment_check_loop():
    while True:
        for user_id in list(user_packages.keys()):
            if not user_payments.get(user_id):
                check_user_payment(user_id)
        time.sleep(60)

# ‘±÷Ä’ø’°’§÷Ä’∏÷Ç’¥ ’∂’∏÷Ä ÷É’∏’≠’°’∂÷Å’¥’°’∂ ’ø’•÷Ñ’Ω’ø
def format_alert(tx, address, price, tx_number):
    txid = tx.get("txid")
    total_received = received_amount_in_tx(tx, address)
    confirmations = tx.get("confirmations", 0)
    status = "‚úÖ Confirmed" if confirmations > 0 else "‚è≥ Pending"
    timestamp = tx.get("time")
    timestamp = datetime.utcfromtimestamp(timestamp).strftime("%Y-%m-%d %H:%M:%S") if timestamp else "Unknown"
    usd_text = f" (${total_received*price:.2f})" if price else " (USD: N/A)"
    return (
        f"üîî ’Ü’∏÷Ä ÷É’∏’≠’°’∂÷Å’∏÷Ç’¥ #{tx_number}!\n"
        f"üìå ’Ä’°’Ω÷Å’•: {address}\n"
        f"üí∞ ‘≥’∏÷Ç’¥’°÷Ä: {total_received:.8f} DASH{usd_text}\n"
        f"üïí ‘∫’°’¥’°’∂’°’Ø: {timestamp}\n"
        f"üîó https://blockchair.com/dash/transaction/{txid}\n"
        f"üìÑ ‘ø’°÷Ä’£’°’æ’´’≥’°’Ø: {status}"
    )

# Telegram handlers

@bot.message_handler(commands=['start'])
def start(msg):
    text = "‘≤’°÷Ä÷á üëã\n‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’¥ ’®’∂’ø÷Ä’´÷Ä ÷É’°’©’•’©’ù ’∏÷Ç’≤’°÷Ä’Ø’•’¨’∏’æ ’∞’°’¥’°’∫’°’ø’°’Ω’≠’°’∂ ’ø’•÷Ñ’Ω’ø’®:\n"
    for key, usd in payment_packages.items():
        text += f"- {package_names[key]} ÷É’°’©’•’© ‚Äî {usd}$\n"
    text += f"\nüìç ’é’≥’°÷Ä’•÷Ñ ’°’µ’Ω Dash ’∞’°’Ω÷Å’•’´’∂’ù\n`{PAYMENT_ADDRESS}`\n\n" \
            "’Ä’•’ø’∏ ’∏÷Ç’≤’°÷Ä’Ø’•÷Ñ ’±’•÷Ä ’æ’≥’°÷Ä’æ’°’Æ ÷É’°’©’•’©’´ ’°’∂’∏÷Ç’∂’®’ù ÷Ö÷Ä’´’∂’°’Ø’ù `1_month`÷â\n" \
            "‘±’µ’™’¥ ’Ω’∫’°’Ω’•÷Ñ, ’∏÷Ä ’±’•÷Ä ’æ’≥’°÷Ä’∏÷Ç’¥’∂ ’®’∂’§’∏÷Ç’∂’æ’´, ’°’∫’° ’¥’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ PIN ’Ø’∏’§’®÷â"
    bot.reply_to(msg, text, parse_mode="Markdown")

@bot.message_handler(func=lambda m: m.text and m.text in payment_packages)
def package_select(msg):
    user_id = str(msg.chat.id)
    package = msg.text.strip()
    user_packages[user_id] = {
        "package": package,
        "paid": False,
        "start_time": None,
        "paid_txs": set()
    }
    bot.reply_to(msg, f"‚úÖ ‘¥’∏÷Ç÷Ñ ’®’∂’ø÷Ä’•÷Å’´÷Ñ {package_names[package]} ÷É’°’©’•’©’®, ’∏÷Ä’® ’°÷Ä’™’• {payment_packages[package]}$÷â\n"
                      f"‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’æ’≥’°÷Ä’•’¨ ’∞’°’¥’°’∫’°’ø’°’Ω’≠’°’∂ ’£’∏÷Ç’¥’°÷Ä’® ’°’µ’Ω Dash ’∞’°’Ω÷Å’•’´’∂’ù\n`{PAYMENT_ADDRESS}`\n"
                      "’ç’∫’°’Ω’•÷Ñ ’æ’≥’°÷Ä’¥’°’∂ ’∞’°’Ω’ø’°’ø’¥’°’∂’®÷â")

@bot.message_handler(func=lambda m: m.text and m.text.isdigit())
def check_pin(msg):
    user_id = str(msg.chat.id)
    if msg.text.strip() == PIN_CODE:
        if user_payments.get(user_id):
            authorized_users.add(user_id)
            bot.reply_to(msg, "‚úÖ PIN ’≥’´’∑’ø ’ß÷â ’Ä’´’¥’° ’Ø’°÷Ä’∏’≤ ’•÷Ñ ’∏÷Ç’≤’°÷Ä’Ø’•’¨ ’±’•÷Ä Dash ’∞’°’Ω÷Å’•’∂ (’Ω’Ø’Ω’æ’∏÷Ç’¥ ’ß X-’∏’æ)÷â")
        else:
            bot.reply_to(msg, "‚ùå ‘¥’∏÷Ç÷Ñ ’§’•’º ’π’•÷Ñ ’æ’≥’°÷Ä’•’¨÷â ‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’Ø’°’ø’°÷Ä’•’¨ ’∞’°’¥’°’∫’°’ø’°’Ω’≠’°’∂ ÷É’∏’≠’°’∂÷Å’∏÷Ç’¥’®÷â")
    else:
        bot.reply_to(msg, "‚ùå ’ç’≠’°’¨ PIN, ÷É’∏÷Ä’±’•÷Ñ ’∂’∏÷Ä’´÷Å÷â")

@bot.message_handler(func=lambda m: m.text and m.text.startswith("X"))
def save_address(msg):
    user_id = str(msg.chat.id)
    if user_id not in authorized_users:
        bot.reply_to(msg, "‚ùå ’Ü’°’≠ ’∫’•’ø÷Ñ ’ß ’¥’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’≥’´’∑’ø PIN ’Ø’∏’§÷â")
        return
    address = msg.text.strip()
    users.setdefault(user_id, [])
    if address not in users[user_id]:
        users[user_id].append(address)
    bot.reply_to(msg, f"‚úÖ ’Ä’°’Ω÷Å’•’∂ {address} ’∫’°’∞’∫’°’∂’æ’•÷Å÷â")

# ’Ñ’∏’∂’´’ø’∏÷Ä’´’∂’£ ÷É’∏’≠’°’∂÷Å’∏÷Ç’¥’∂’•÷Ä’´ ’∞’°’¥’°÷Ä, ’∏÷Ä’∏’∂÷Ñ ’∏÷Ç’≤’°÷Ä’Ø’æ’∏÷Ç’¥ ’•’∂ ÷Ö’£’ø’°’ø’•÷Ä’•÷Ä’´ ’∫’°’∞’æ’°’Æ ’∞’°’Ω÷Å’•’∂’•÷Ä’´’∂
def monitor_loop():
    while True:
        try:
            price = get_dash_price_usd()
            if not price:
                print("Could not fetch DASH price, skipping iteration.")
                time.sleep(10)
                continue

            for user_id, addresses in users.items():
                if user_id not in authorized_users:
                    continue  # User not authorized

                for address in addresses:
                    txs = get_latest_txs(address)
                    txs.reverse()
                    sent_txs.setdefault(address, [])

                    last_number = max([t["num"] for t in sent_txs[address]], default=0)

                    for tx in txs:
                        txid = tx.get("txid")
                        if txid in [t["txid"] for t in sent_txs[address]]:
                            continue

                        amt = received_amount_in_tx(tx, address)
                        if amt <= 0:
                            continue

