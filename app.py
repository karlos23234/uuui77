import os
import json
import time
import threading
import requests
import telebot
from telebot import types
from flask import Flask

# ========================
# Config
# ========================
BOT_TOKEN = os.getenv("BOT_TOKEN", "’î’à_TOKEN‘∏")  # Render-’∏÷Ç’¥ ’§’´÷Ä Env Var
bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")

USERS_FILE = "users.json"       # { user_id: {"address": "..."} }
STATE_FILE = "state.json"       # { user_id: "AWAITING_ADDR" | "IDLE" }
TX_LIMIT = 5                    # ÷Ñ’°’∂’´ TX ÷Å’∏÷Ç’µ÷Å ’ø’°’∂÷Ñ

# ========================
# Data helpers
# ========================
def load_json(path, default):
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return default

def save_json(path, data):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

users = load_json(USERS_FILE, {})
uistate = load_json(STATE_FILE, {})

def set_state(uid, state):
    uistate[str(uid)] = state
    save_json(STATE_FILE, uistate)

def get_state(uid):
    return uistate.get(str(uid), "IDLE")

def set_address(uid, addr):
    users[str(uid)] = {"address": addr}
    save_json(USERS_FILE, users)

def get_address(uid):
    d = users.get(str(uid))
    return d["address"] if d else None

# ========================
# TX fetchers (’¥’•’∂÷Ñ ÷É’∏÷Ä’±’∏÷Ç’¥ ’•’∂÷Ñ ’¥’´ ÷Ñ’°’∂’´ provider)
# ========================
BC_BASE = "https://api.blockchair.com/dash/dash"
BC_WEB  = "https://blockchair.com/dash/transaction/"

def fetch_txs_blockchair(address, limit=TX_LIMIT):
    """
    Blockchair public API:
    /address/{address}?transaction_details=true
    """
    url = f"{BC_BASE}/address/{address}"
    params = {"transaction_details": "true"}
    r = requests.get(url, params=params, timeout=15)
    r.raise_for_status()
    data = r.json()
    # ’è’æ’µ’°’¨’∂’•÷Ä’´ ’Ø’°’º’∏÷Ç÷Å’æ’°’Æ÷Ñ’® ’Ω’∏’æ’∏÷Ä’°’¢’°÷Ä’ù data["data"][address]["transactions"] -> list of txids
    txids = data.get("data", {}).get(address, {}).get("transactions", [])
    return txids[:limit]

def fetch_txs_sochain(address, limit=TX_LIMIT):
    """
    SoChain API (’∫’°÷Ä’¶ ’ø’°÷Ä’¢’•÷Ä’°’Ø):
    /api/v2/address/DASH/{address} ’æ’•÷Ä’°’§’°÷Ä’±’∂’∏÷Ç’¥ ’ß "txs": [{ "txid": ... }, ...]
    """
    url = f"https://sochain.com/api/v2/address/DASH/{address}"
    r = requests.get(url, timeout=15)
    r.raise_for_status()
    data = r.json()
    txs = data.get("data", {}).get("txs", [])
    txids = [t.get("txid") for t in txs if t.get("txid")]
    return txids[:limit]

def fetch_latest_txs(address, limit=TX_LIMIT):
    # ’ì’∏÷Ä’±’∏÷Ç’¥ ’•’∂÷Ñ providers ’∞’•÷Ä’©’∏’æ
    for fn in (fetch_txs_blockchair, fetch_txs_sochain):
        try:
            txs = fn(address, limit=limit)
            if txs:
                return txs
        except Exception:
            continue
    return []

# ========================
# Keyboards
# ========================
def confirm_kb(addr):
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton("‚úÖ ’Ä’°’Ω’ø’°’ø’•’¨", callback_data=f"confirm:{addr}"),
        types.InlineKeyboardButton("‚úèÔ∏è ’ì’∏’≠’•’¨", callback_data="change_addr"),
    )
    return kb

def menu_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üîÅ ’ì’∏’≠’•’¨ ’∞’°’Ω÷Å’•’∂", "üì¶ ’è’•’Ω’∂’•’¨ ’æ’•÷Ä’ª’´’∂ TX-’•÷Ä’®")
    return kb

# ========================
# Handlers
# ========================
@bot.message_handler(commands=["start"])
def on_start(msg):
    uid = msg.chat.id
    set_state(uid, "AWAITING_ADDR")
    bot.reply_to(
        msg,
        "‘≤’°÷Ä÷á üëã\n"
        "‘≥÷Ä’´’õ÷Ä ÷Ñ’∏ <b>Dash</b> ’∞’°’Ω÷Å’•’∂ (’Ω’Ø’Ω’æ’∏÷Ç’¥ ’ß <b>X</b>-’∏’æ):\n\n"
        "’ï÷Ä’´’∂’°’Ø’ù <code>XrRtpHgnK8bfoVVeb6B3Qfp2EGY27wjCm4</code>",
        reply_markup=types.ReplyKeyboardRemove(),
    )

@bot.message_handler(func=lambda m: get_state(m.chat.id) == "AWAITING_ADDR" and isinstance(m.text, str))
def on_address_entered(msg):
    uid = msg.chat.id
    addr = msg.text.strip()
    if not addr or not addr.startswith("X") or " " in addr or len(addr) < 26:
        bot.reply_to(msg, "‚ö†Ô∏è ’ç’≠’°’¨ ’±÷á’°’π’°÷É‚Ä§ ’∞’°’Ω÷Å’•’∂ ’∫’•’ø÷Ñ ’ß ’Ω’Ø’Ω’æ’´ <b>X</b>-’∏’æ ÷á ’¨’´’∂’´ ’°’º’°’∂÷Å ’¢’°÷Å’°’ø’∂’•÷Ä’´÷â ’ì’∏÷Ä’±’´÷Ä ’Ø÷Ä’Ø’´’∂:")
        return
    # ÷Å’∏÷Ç’µ÷Å ’•’∂÷Ñ ’ø’°’¨’´’Ω ’∞’°’Ω’ø’°’ø’¥’°’∂ ’Ø’∏’≥’°’Ø’∂’•÷Ä
    bot.reply_to(
        msg,
        f"‘ø÷Å’°’∂’Ø’°’∂’°’Ω ’Ω’°’û ’∫’°’∞’•’¨ ’∏÷Ä’∫’•’Ω ÷Ñ’∏ ’∞’°’Ω÷Å’•‚Ä§\n\n<code>{addr}</code>",
        reply_markup=confirm_kb(addr),
    )

@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("confirm:"))
def on_confirm_addr(call):
    uid = call.message.chat.id
    addr = call.data.split("confirm:", 1)[1]
    set_address(uid, addr)
    set_state(uid, "IDLE")
    bot.edit_message_text(
        chat_id=uid,
        message_id=call.message.message_id,
        text=f"‚úÖ ’Ä’°’Ω÷Å’•’∂ ’∞’°’Ω’ø’°’ø’æ’•÷Å‚Ä§\n<code>{addr}</code>",
    )
    bot.send_message(
        uid,
        "’ä’°’ø÷Ä’°’Ω’ø ’ß ‚úîÔ∏è\n‘∏’∂’ø÷Ä’´÷Ä ’£’∏÷Ä’Æ’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂’ù",
        reply_markup=menu_kb(),
    )

@bot.callback_query_handler(func=lambda c: c.data == "change_addr")
def on_change_addr(call):
    uid = call.message.chat.id
    set_state(uid, "AWAITING_ADDR")
    bot.edit_message_text(
        chat_id=uid,
        message_id=call.message.message_id,
        text="‘≥÷Ä’´’õ÷Ä ’∂’∏÷Ä Dash ’∞’°’Ω÷Å’• (’Ω’Ø’Ω’æ’∏÷Ç’¥ ’ß X-’∏’æ):",
    )

@bot.message_handler(func=lambda m: m.text == "üîÅ ’ì’∏’≠’•’¨ ’∞’°’Ω÷Å’•’∂")
def on_change_btn(msg):
    set_state(msg.chat.id, "AWAITING_ADDR")
    bot.reply_to(msg, "‘≥÷Ä’´’õ÷Ä ’∂’∏÷Ä Dash ’∞’°’Ω÷Å’• (’Ω’Ø’Ω’æ’∏÷Ç’¥ ’ß X-’∏’æ):", reply_markup=types.ReplyKeyboardRemove())

@bot.message_handler(func=lambda m: m.text == "üì¶ ’è’•’Ω’∂’•’¨ ’æ’•÷Ä’ª’´’∂ TX-’•÷Ä’®")
def on_show_txs(msg):
    uid = msg.chat.id
    addr = get_address(uid)
    if not addr:
        bot.reply_to(msg, "‘¥’•’º ’∞’°’Ω÷Å’• ’π’∏÷Ç’∂’•’Ω ’∫’°’∞’æ’°’Æ÷â ’ç’•’≤’¥’´÷Ä /start ÷á ’¥’∏÷Ç’ø÷Ñ’°’£÷Ä’´÷Ä ’∞’°’Ω÷Å’•’∂÷â")
        return
    bot.send_chat_action(uid, "typing")
    txs = fetch_latest_txs(addr, limit=TX_LIMIT)
    if not txs:
        bot.reply_to(msg, "’â’∞’°’ª’∏’≤’æ’•÷Å ’¢’•’º’∂’•’¨ TX-’•÷Ä’® ’∞’´’¥’°‚Ä§ ÷É’∏÷Ä’±’´÷Ä ÷Ñ’´’π ’∞’•’ø’∏÷â")
        return
    lines = [f"üîó <a href='{BC_WEB}{tx}'>TX</a> ‚Äî <code>{tx[:16]}‚Ä¶</code>" for tx in txs]
    bot.reply_to(
        msg,
        f"’é’•÷Ä’ª’´’∂ {len(txs)} ’£’∏÷Ä’Æ’°÷Ä÷Ñ’∂’•÷Ä’®’ù\n" + "\n".join(lines),
        reply_markup=menu_kb(),
        disable_web_page_preview=True,
    )

# fallback’ù ’•’©’• ÷Ö’£’ø’æ’∏’≤’® ’∏÷Ç’≤’°÷Ä’Ø’´ X-’∏’æ ’Ω’Ø’Ω’æ’∏’≤, ’¢’°’µ÷Å ’°÷Ä’§’•’∂ state=IDLE
@bot.message_handler(func=lambda m: isinstance(m.text, str) and m.text.startswith("X"))
def on_any_x(msg):
    uid = msg.chat.id
    if get_state(uid) == "AWAITING_ADDR":
        return  # ’Ω’° ’Ø’¢’º’∂’´ on_address_entered-’®
    # ’°’º’°’ª’°÷Ä’Ø’•’∂÷Ñ ÷É’∏’≠’•’¨ ’∞’°’Ω÷Å’•’∂
    bot.reply_to(
        msg,
        "‘ø’∏÷Ç’¶’•’û’Ω ’Ω’° ’§’∂’•’Ω ’∏÷Ä’∫’•’Ω ’∂’∏÷Ä ’∞’°’Ω÷Å’•‚Ä§",
        reply_markup=confirm_kb(msg.text.strip()),
    )

# ========================
# Background monitor (’•’©’• ’∫’•’ø÷Ñ ’ß)
# ========================
def monitor():
    while True:
        print("‚è≥ Monitor loop is running...")
        time.sleep(30)

# ========================
# Start polling in thread (Render-friendly)
# ========================
def run_bot():
    print("ü§ñ Starting bot in polling mode...")
    try:
        bot.remove_webhook()
    except Exception:
        pass
    bot.infinity_polling(skip_pending=True, timeout=20, long_polling_timeout=20)

threading.Thread(target=monitor, daemon=True).start()
threading.Thread(target=run_bot, daemon=True).start()

# ========================
# Tiny Flask app so Render keeps the service alive
# ========================
app = Flask(__name__)

@app.route("/")
def home():
    return "Dash bot is running (polling)."

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
